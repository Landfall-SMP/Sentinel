plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id("xyz.jpenilla.run-velocity") version "2.3.1"
}

group = 'com.confect1on'
version = '1.1.0'

def targetJavaVersion = 17

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")

    // Shaded dependencies
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "mysql:mysql-connector-java:8.0.33"
    implementation 'net.dv8tion:JDA:5.0.0-beta.8'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

shadowJar {
    archiveClassifier.set('') // Make final jar named like sentinel-1.0-SNAPSHOT.jar
    relocate 'com.zaxxer.hikari', 'com.confect1on.sentinel.lib.hikari'
    relocate 'com.google.gson', 'com.confect1on.sentinel.lib.gson'
    relocate 'com.mysql.cj', 'com.confect1on.sentinel.lib.mysql'
    relocate 'net.dv8tion.jda', 'com.confect1on.sentinel.lib.jda'
}

tasks.build {
    dependsOn shadowJar
}

tasks.runVelocity {
    velocityVersion("3.4.0-SNAPSHOT")

    // Automatically run the shaded jar
    pluginJars.setFrom(tasks.named("shadowJar").flatMap { it.archiveFile })
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })
project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
